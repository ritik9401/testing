name: konnect-gatewat-deployment

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy_to_konnect:
    runs-on: ubuntu-latest
    name: Deploying Kong Configuration
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Node.js and npm
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Newman
        run: npm install -g newman

      - name: Install Spectral
        run: npm install -g @stoplight/spectral-cli

      - name: Install Deck
        run: |
          curl -sL https://github.com/kong/deck/releases/download/v1.34.0/deck_1.34.0_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz -C /tmp
          sudo cp /tmp/deck /usr/local/bin/
          deck version

      - name: Lint OAS spec using Spectral
        run: spectral lint ./kong-config/spec.yaml --ruleset ./kong-config/.spectral.yaml

      - name: Generate new gateway configuration
        run: |
          deck file openapi2kong --spec ./kong-config/spec.yaml --select-tag=hello,dev --output-file kong.yaml

      - name: Add Global plugins
        run: cat kong.yaml | deck file add-plugins ./kong-config/global-plugin.yaml -o kong.yaml

      - name: Add Route plugins
        run: cat kong.yaml | deck file add-plugins ./kong-config/route-level-plugin.yaml -o kong.yaml

      - name: Add Service plugins
        run: cat kong.yaml | deck file add-plugins ./kong-config/service-level-plugin.yaml -o kong.yaml

      - name: Ping to Konnect Org
        run: deck gateway ping --konnect-token ${{ secrets.KONNECT_TOKEN }}
        env:
          KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}

      - name: Backup existing configuration
        run: deck gateway dump --konnect-token ${{ secrets.KONNECT_TOKEN }} --konnect-control-plane-name ${{ secrets.CP_NAME }} --konnect-addr=https://eu.api.konghq.com --tls-skip-verify > kong-backup.yaml
        env:
          KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
          CP_NAME: ${{ secrets.CP_NAME }}

      - name: Apply new configuration
        run: |
          deck gateway sync kong.yaml --konnect-token ${{ secrets.KONNECT_TOKEN }} --konnect-control-plane-name ${{ secrets.CP_NAME }} --select-tag=hello,dev --konnect-addr=https://eu.api.konghq.com --tls-skip-verify
        env:
          KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
          CP_NAME: ${{ secrets.CP_NAME }}

      - name: Run API Tests
        id: apiTests
        run: newman run newman/newman_collection.postman_collection.json

      - name: Back out changes on failure
        if: always() && steps.apiTests.outcome == 'failure'
        run: deck gateway sync kong-backup.yaml --konnect-token ${{ secrets.KONNECT_TOKEN }} --konnect-control-plane-name ${{ secrets.CP_NAME }} --konnect-addr=https://eu.api.konghq.com --tls-skip-verify
        env:
          KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
          CP_NAME: ${{ secrets.CP_NAME }}

  publish-customer-api-to-portal:
    name: Publish OAS to dev portal
    needs: deploy_to_konnect
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Fetch environment variables
        id: set_env_vars
        run: |
          echo "API_PRODUCT_NAME: ${{ vars.API_PRODUCT_NAME }}"
          echo "CONTROL_PLANE_NAME: ${{ vars.CONTROL_PLANE_NAME }}"
          echo "GATEWAY_SERVICE_NAME: ${{ vars.GATEWAY_SERVICE_NAME }}"

      - name: Check API Product is already exist or not or Creating new API product
        run: |
          response=$(curl -s --request GET \
            --url "${{ vars.ADMIN_API_URL }}/api-products" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}")

          if [[ $response == *"${{ vars.API_PRODUCT_NAME }}"* ]]; then
            echo "API product already exists, Please change the API product name"
            echo "API_PRODUCT_ALREADY_EXISTS=true" >> $GITHUB_ENV
            exit 1  # Terminate the job here since the product already exists
          else
            echo "API product doesn't exist, creating..."
            curl --request POST \
              --url ${{ vars.ADMIN_API_URL }}/api-products \
              --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
              --header 'Content-Type: application/json' \
              --data '{
                "name": "${{ vars.API_PRODUCT_NAME }}",
                "description": "Creating through admin api",
                "labels": {}
              }'
          fi 

      - name: Get API product ID
        run: |
          api_product_name="${{ vars.API_PRODUCT_NAME }}"

          api_product_id=$(curl --request GET \
            --url ${{ vars.ADMIN_API_URL }}/api-products \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r --arg api_product_name "$api_product_name" '.data[] | select(.name == $api_product_name) | .id // empty')

          if [ "$api_product_id" = "empty" ]; then
            echo "Error: API Product ID not found."
            exit 1
          fi

          echo "API_PRODUCT_ID=$api_product_id" >> $GITHUB_ENV

      # Other steps for publishing to the dev portal go here...
