name: konnect-gateway-deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish-customer-api-to-portal:
    name: Publish OAS to dev portal
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install yq (v4)
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.16.1/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Check and set SPEC_FILE environment variable
        run: |
          if [ ! -f kong-config/spec.yaml ]; then
            echo "spec.yaml file not found in ./kong-config directory"
            exit 1
          fi
          SPEC_FILE="kong-config/spec.yaml"
          echo "SPEC_FILE=$SPEC_FILE" >> $GITHUB_ENV

      - name: Fetch environment variables and extract Product details
        id: set_env_vars
        run: |
          CONFIG=$(cat ./config.json)
          CONTROL_PLANE_NAME=$(echo $CONFIG | jq -r .CONTROL_PLANE_NAME)
          APPLICATION_AUTH_STRATEGY=$(echo $CONFIG | jq -r .APPLICATION_AUTH_STRATEGY)
          ADMIN_API_URL=$(echo $CONFIG | jq -r .ADMIN_API_URL)
          
          API_PRODUCT_NAME=$(yq e '.info.title' $SPEC_FILE | sed 's/ /-/g')
          API_PRODUCT_DESCRIPTION=$(yq e '.info.description' $SPEC_FILE)
          API_PRODUCT_VERSION=$(yq e '.info.version' $SPEC_FILE)
          GW_SERVICE_NAME=$(yq e '.info.title' $SPEC_FILE | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')

          echo "API_PRODUCT_NAME=$API_PRODUCT_NAME" >> $GITHUB_ENV
          echo "API_PRODUCT_DESCRIPTION=$API_PRODUCT_DESCRIPTION" >> $GITHUB_ENV
          echo "API_PRODUCT_VERSION=$API_PRODUCT_VERSION" >> $GITHUB_ENV
          echo "GW_SERVICE_NAME=$GW_SERVICE_NAME" >> $GITHUB_ENV
          echo "CONTROL_PLANE_NAME=$CONTROL_PLANE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_AUTH_STRATEGY=$APPLICATION_AUTH_STRATEGY" >> $GITHUB_ENV
          echo "API_PRODUCT_ALREADY_EXISTS=false" >> $GITHUB_ENV
          echo "ADMIN_API_URL=$ADMIN_API_URL" >> $GITHUB_ENV

      - name: Debug API_PRODUCT_NAME and other variables
        run: |
          echo "API_PRODUCT_NAME=${{ env.API_PRODUCT_NAME }}"
          echo "API_PRODUCT_DESCRIPTION=${{ env.API_PRODUCT_DESCRIPTION }}"
          echo "API_PRODUCT_VERSION=${{ env.API_PRODUCT_VERSION }}"
          echo "GW_SERVICE_NAME=${{ env.GW_SERVICE_NAME }}"
          echo "CONTROL_PLANE_NAME=${{ env.CONTROL_PLANE_NAME }}"
          echo "APPLICATION_AUTH_STRATEGY=${{ env.APPLICATION_AUTH_STRATEGY }}"
          echo "ADMIN_API_URL=${{ env.ADMIN_API_URL }}"

      - name: Check if the API product already exists or create a new one
        id: check_or_create_api_product
        run: |
          response=$(curl -s --request GET \
            --url "${{ env.ADMIN_API_URL }}/api-products" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}")
          
          if echo "$response" | jq -e ".data[] | select(.name == \"${{ env.API_PRODUCT_NAME }}\")" > /dev/null; then
            echo "The API product already exists. Retrieving the Product ID."
            api_product_id=$(echo "$response" | jq -r --arg api_product_name "${{ env.API_PRODUCT_NAME }}" '.data[] | select(.name == $api_product_name) | .id')
            echo "API_PRODUCT_ID=$api_product_id" >> $GITHUB_ENV
            echo "API_PRODUCT_ALREADY_EXISTS=true" >> $GITHUB_ENV
          else
            echo "The API product doesn't exist. Creating it now..."
            api_product_id=$(curl -s --request POST \
              --url "${{ env.ADMIN_API_URL }}/api-products" \
              --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
              --header 'Content-Type: application/json' \
              --data '{
                "name": "'"${{ env.API_PRODUCT_NAME }}"'",
                "description": "'"${{ env.API_PRODUCT_DESCRIPTION }}"'",
                "labels": {}
              }' | jq -r '.id')
            echo "API_PRODUCT_ID=$api_product_id" >> $GITHUB_ENV
          fi

      - name: Debug API_PRODUCT_ID
        run: echo "API_PRODUCT_ID=${{ env.API_PRODUCT_ID }}"

      - name: Get Developer Portal ID
        run: |
          Dev_portal_id=$(curl -s --request GET \
            --url "${{ env.ADMIN_API_URL }}/portals" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
            | jq -r '.data[].id')
          echo "DEV_PORTAL_ID=$Dev_portal_id" >> $GITHUB_ENV

      - name: Publish API product with portal ID
        run: |
          if [ -z "${{ env.API_PRODUCT_ID }}" ]; then
            echo "Error: API_PRODUCT_ID is not set"
            exit 1
          fi

          curl -s --request PATCH \
            --url "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
            --header 'Content-Type: application/json' \
            --data '{
              "portal_ids": ["'"${{ env.DEV_PORTAL_ID }}"'"]
            }'

      - name: Create product version if it doesn't exist
        run: |
          CURRENT_PRODUCT_VERSION_ID=$(curl -s --request GET \
            --url "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}/product-versions" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
            | jq -r --arg api_version "${{ env.API_PRODUCT_VERSION }}" '.data[] | select(.name == $api_version) | .id // empty')
      
          if [ -z "$CURRENT_PRODUCT_VERSION_ID" ]; then
            echo "Version ${{ env.API_PRODUCT_VERSION }} not found for API product ${{ env.API_PRODUCT_NAME }} - creating it..."
            api_product_version_id=$(curl -s --request POST \
              --url "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}/product-versions" \
              --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
              --header 'Content-Type: application/json' \
              --data '{
                "name": "'"${{ env.API_PRODUCT_VERSION }}"'",
                "publish_status": "published"
              }' | jq -r '.id')
            echo "API_PRODUCT_VERSION_ID=$api_product_version_id" >> $GITHUB_ENV
          else
            echo "Version ${{ env.API_PRODUCT_VERSION }} already exists for API product ${{ env.API_PRODUCT_NAME }} with ID $CURRENT_PRODUCT_VERSION_ID"
            echo "API_PRODUCT_VERSION_ID=$CURRENT_PRODUCT_VERSION_ID" >> $GITHUB_ENV
          fi

      - name: Get Control Plane ID
        run: |
          control_plane_id=$(curl -s --location "https://eu.api.konghq.com/v2/control-planes/" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
            | jq -r --arg control_plane_name "$CONTROL_PLANE_NAME" '.data[] | select(.name == "default") | .id')
          echo "CONTROL_PLANE_ID=$control_plane_id" >> $GITHUB_ENV
          echo "Control Plane ID: $control_plane_id"

      - name: Get Service ID
        run: |
          control_plane_id="${{ env.CONTROL_PLANE_ID }}"
          gateway_service_name="${{ env.GW_SERVICE_NAME }}"
          service_id=$(curl -s --location "https://eu.api.konghq.com/v2/control-planes/${control_plane_id}/core-entities/services" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
            | jq -r --arg gateway_service_name "$gateway_service_name" '.data[] | select(.name == $gateway_service_name) | .id')
          echo "SERVICE_ID=$service_id" >> $GITHUB_ENV
          echo "Service ID: $service_id"

      - name: Retrieving current service link information to the API product
        run: |
          rollback_api_product_version=$(curl -s --location --request GET "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}/product-versions" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r '.data[] | select(.gateway_service != null) | .name')

          rollback_api_product_version_id=$(curl -s --location --request GET "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}/product-versions" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r '.data[] | select(.gateway_service != null) | .id')

          rollback_api_product_service=$(curl -s --location --request GET "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}/product-versions" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r '.data[] | select(.gateway_service != null) | .gateway_service')

          echo "ROLLBACK_API_PRODUCT_VERSION=$rollback_api_product_version" >> $GITHUB_ENV
          echo "ROLLBACK_API_PRODUCT_VERSION_ID=$rollback_api_product_version_id" >> $GITHUB_ENV
          echo "ROLLBACK_API_PRODUCT_SERVICE=$rollback_api_product_service" >> $GITHUB_ENV

          echo "rollback_api_product_version: $rollback_api_product_version"
          echo "rollback_api_product_version_id: $rollback_api_product_version_id"
          echo "rollback_api_product_service: $rollback_api_product_service"

      - name: Link Gateway Service to the API Product
        run: |
          curl -s --request PATCH \
            --url "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}/product-versions/${{ env.API_PRODUCT_VERSION_ID }}" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
            --header 'Content-Type: application/json' \
            --data '{
              "gateway_service": "'"${{ env.SERVICE_ID }}"'"
            }'

      - name: Validate API product service link
        run: |
          link=$(curl -s --location --request GET "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}/product-versions/${{ env.API_PRODUCT_VERSION_ID }}" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r '.gateway_service')

          if [ "$link" == "${{ env.SERVICE_ID }}" ]; then
            echo "Service ${SERVICE_ID} has been successfully linked to the API product version ${{ env.API_PRODUCT_VERSION }}."
          else
            echo "Failed to link the service ${SERVICE_ID} to the API product version ${{ env.API_PRODUCT_VERSION }}."
            exit 1
          fi

      - name: Link the OpenAPI Spec to the API Product Version
        run: |
          curl -s --request PATCH \
            --url "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}/product-versions/${{ env.API_PRODUCT_VERSION_ID }}" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
            --header 'Content-Type: application/json' \
            --data '{
              "document": {
                "path": "spec.yaml",
                "type": "oas",
                "value": "'"$(cat kong-config/spec.yaml | yq -o=json | jq -Rs .)"'"
              }
            }'

      - name: Validate OAS link
        run: |
          doc=$(curl -s --location --request GET "${{ env.ADMIN_API_URL }}/api-products/${{ env.API_PRODUCT_ID }}/product-versions/${{ env.API_PRODUCT_VERSION_ID }}" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r '.document.path')

          if [ "$doc" == "spec.yaml" ]; then
            echo "OAS spec.yaml has been successfully linked to the API product version ${{ env.API_PRODUCT_VERSION }}."
          else
            echo "Failed to link OAS spec.yaml to the API product version ${{ env.API_PRODUCT_VERSION }}."
            exit 1
          fi

