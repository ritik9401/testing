name: konnect-gateway-deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy_to_konnect:
    runs-on: ubuntu-latest
    name: Deploying Kong Configuration
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Print current working directory
        run: pwd

      - name: Verify file path
        run: ls -al ./config.json

      - name: Install Node.js and npm
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Newman
        run: npm install -g newman

      - name: Install Spectral
        run: npm install -g @stoplight/spectral-cli

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install Deck
        run: |
          curl -sL https://github.com/kong/deck/releases/download/v1.34.0/deck_1.34.0_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz -C /tmp
          sudo cp /tmp/deck /usr/local/bin/
          deck version

      - name: Fetch environment variables and extract Product details
        id: set_env_vars
        run: |
          config=$(cat ./config.json)
          echo "Config content: $config"
          CONTROL_PLANE_NAME=$(echo "$config" | jq -r '.CONTROL_PLANE_NAME')
          APPLICATION_AUTH_STRATEGY=$(echo "$config" | jq -r '.APPLICATION_AUTH_STRATEGY')
          SERVICE_HOST=$(echo "$config" | jq -r '.SERVICE_HOST')
          echo "CONTROL_PLANE_NAME=$CONTROL_PLANE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_AUTH_STRATEGY=$APPLICATION_AUTH_STRATEGY" >> $GITHUB_ENV
          echo "SERVICE_HOST=$SERVICE_HOST" >> $GITHUB_ENV

      - name: Display environment variables for verification
        run: |
          echo "CONTROL_PLANE_NAME=$CONTROL_PLANE_NAME"
          echo "APPLICATION_AUTH_STRATEGY=$APPLICATION_AUTH_STRATEGY"
          echo "SERVICE_HOST=$SERVICE_HOST"

      # - name: Lint OAS spec using Spectral
      #   run: spectral lint ./kong-config/spec.yaml --ruleset ./kong-config/.spectral.yaml

      - name: Generate new gateway configuration
        run: |
          deck file openapi2kong --spec ./kong-config/spec.yaml --output-file kong.yaml

      - name: Add OPTIONS method in all the routes using Deck Patch command.
        run: |
          deck file patch --selector="$..routes[*].methods" --value='["OPTIONS"]' -s kong.yaml -o kong.yaml

      - name: Add Global plugins
        run: deck file add-plugins ./kong-config/global-plugin.yaml -s kong.yaml -o kong.yaml

      - name: Ping to Konnect Org
        run: deck gateway ping --konnect-token ${{ secrets.KONNECT_TOKEN }}
        env:
          KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}

      - name: Backup existing configuration
        run: |
          deck gateway dump --konnect-token ${{ secrets.KONNECT_TOKEN }} --konnect-control-plane-name ${{ env.CONTROL_PLANE_NAME }} --konnect-addr=https://eu.api.konghq.com --tls-skip-verify > kong-backup.yaml
        env:
          KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
          CONTROL_PLANE_NAME: ${{ env.CONTROL_PLANE_NAME }}

      - name: Apply new configuration
        run: |
          deck gateway sync kong.yaml --konnect-token ${{ secrets.KONNECT_TOKEN }} --konnect-control-plane-name ${{ env.CONTROL_PLANE_NAME }} --select-tag=hello,dev --konnect-addr=https://eu.api.konghq.com --tls-skip-verify
        env:
          KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
          CONTROL_PLANE_NAME: ${{ env.CONTROL_PLANE_NAME }}

      # - name: Wait for a few seconds
      #   run: sleep 10

      # - name: Run API Tests
      #   id: apiTests
      #   run: newman run newman/newman_collection.postman_collection.json

      # - name: Back out changes on failure
      #   if: always() && steps.apiTests.outcome == 'failure'
      #   run: deck gateway sync kong-backup.yaml --konnect-token ${{ secrets.KONNECT_TOKEN }} --konnect-control-plane-name ${{ env.CONTROL_PLANE_NAME }} --konnect-addr=https://eu.api.konghq.com --tls-skip-verify
      #   env:
      #     KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}
      #     CONTROL_PLANE_NAME: ${{ env.CONTROL_PLANE_NAME }}

  publish-customer-api-to-portal:
    name: Publish OAS to dev portal
    needs: deploy_to_konnect
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Find OAS file name in the directory
        run: |
          cd ./kong-config
          SPEC_FILE="spec.yaml"  # Assuming the file name is known
          echo "SPEC_FILE=$SPEC_FILE" >> $GITHUB_ENV


      - name: Fetch environment variables and extract Product details
        id: set_env_vars
        run: |
          echo "API_PRODUCT_NAME=$(yq e '.info.title' $SPEC_FILE | sed 's/ /-/g')" >> $GITHUB_ENV
          echo "API_PRODUCT_DESCRIPTION=$(yq e '.info.description' $SPEC_FILE)" >> $GITHUB_ENV
          echo "API_PRODUCT_VERSION=$(yq e '.info.version' $SPEC_FILE)" >> $GITHUB_ENV
          echo "GW_SERVICE_NAME=$(yq e '.info.title' $SPEC_FILE | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          CONTROL_PLANE_NAME=$(echo $CONFIG | jq -r .CONTROL_PLANE_NAME)
          APPLICATION_AUTH_STRATEGY=$(echo $CONFIG | jq -r .APPLICATION_AUTH_STRATEGY)
          echo "CONTROL_PLANE_NAME=$CONTROL_PLANE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_AUTH_STRATEGY=$APPLICATION_AUTH_STRATEGY" >> $GITHUB_ENV
          echo "API_PRODUCT_ALREADY_EXISTS=false" >> $GITHUB_ENV

      - name: Check if the API product already exists or create a new one
        run: |
          response=$(curl -s --request GET \
            --url "${{ vars.ADMIN_API_URL }}/api-products" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}")

          if [[ $response == *"${{ env.API_PRODUCT_NAME }}"* ]]; then
            echo "The API product already exists. Retrieving the Product ID."
            api_product_id=$(curl --request GET \
              --url ${{ vars.ADMIN_API_URL }}/api-products \
              --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
              | jq -r --arg api_product_name "${{ env.API_PRODUCT_NAME }}" '.data[] | select(.name == $api_product_name) | .id')
            echo "API_PRODUCT_ID=$api_product_id" >> $GITHUB_ENV
          else
            echo "The API product doesn't exist. Creating it now..."
            api_product_id=$(curl --request POST \
              --url ${{ vars.ADMIN_API_URL }}/api-products \
              --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
              --header 'Content-Type: application/json' \
              --data '{
                "name": "${{ env.API_PRODUCT_NAME }}",
                "description": "${{ env.API_PRODUCT_DESCRIPTION }}",
                "labels": {}
              }' | jq -r '.id')
            echo "API_PRODUCT_ID=$api_product_id" >> $GITHUB_ENV
          fi

      - name: Get Developer Portal ID
        run: |
          Dev_portal_id=$(curl --request GET \
            --url ${{ vars.ADMIN_API_URL }}/portals \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r '.data[].id')
          echo "DEV_PORTAL_ID=$Dev_portal_id" >> $GITHUB_ENV

      - name: Publish product to the dev portal
        run: |
          curl --request PATCH \
            --url ${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data "{
              \"portal_ids\": [\"$DEV_PORTAL_ID\"]
            }"

      - name: Create product version if it doesn't exist
        run: |
          CURRENT_PRODUCT_VERSION_ID=$(curl -s --request GET \
            --url "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions" \
            --header "Authorization: ${{ secrets.KONNECT_TOKEN }}" \
            | jq -r --arg api_version "${{ env.API_PRODUCT_VERSION }}" '.data[] | select(.name == $api_version) | .id // empty')

          if [ -z "$CURRENT_PRODUCT_VERSION_ID" ]; then
            echo "> Version $API_PRODUCT_VERSION not found in API Versions for $API_PRODUCT_NAME - creating it..."

            api_product_version_id=$(curl --request POST \
              --url ${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions \
              --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
              --header 'Content-Type: application/json' \
              --data '{
                "name": "${{ env.API_PRODUCT_VERSION }}",
                "publish_status": "published"
              }' | jq -r '.id')
            echo "API_PRODUCT_VERSION_ID=$api_product_version_id" >> $GITHUB_ENV
          else
            echo "> Version $API_PRODUCT_VERSION already exists for API $API_NAME with ID $API_PRODUCT_NAME"
            echo "API_PRODUCT_VERSION_ID=$CURRENT_PRODUCT_VERSION_ID" >> $GITHUB_ENV
          fi

      - name: Get Control Plane ID
        run: |
          control_plane_id=$(curl --location "${{ vars.ADMIN_API_URL }}/control-planes" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r --arg control_plane_name "${{ env.CONTROL_PLANE_NAME }}" '.data[] | select(.name == $control_plane_name) | .id')
          echo "CONTROL_PLANE_ID=$control_plane_id" >> $GITHUB_ENV

      - name: Get Service ID
        run: |
          service_id=$(curl --location "${{ vars.ADMIN_API_URL }}/control-planes/$CONTROL_PLANE_ID/core-entities/services" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r --arg gw_service_name "${{ env.GW_SERVICE_NAME }}" '.data[] | select(.name == $gw_service_name) | .id')

          echo "SERVICE_ID=$service_id" >> $GITHUB_ENV

      - name: Retrieving current service link information to the api product
        run: |
          # Retrieving information on which API product version is associated with a service link in case of a rollback.
          rollback_api_product_version=$(curl --location --request GET "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r '.data[] | select(.gateway_service != null) | .name')

          rollback_api_product_version_id=$(curl --location --request GET "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r '.data[] | select(.gateway_service != null) | .id')
          echo "ROLLBACK_SERVICE_LINK_VERSION=$rollback_api_product_version" >> $GITHUB_ENV
          echo "ROLLBACK_SERVICE_LINK_VERSION_ID=$rollback_api_product_version_id" >> $GITHUB_ENV

      - name: Link service to the product version
        run: |
          echo "Check if current service link product version and the version specified in the OAS specification version is same or not.."
          if [[ "${{ env.ROLLBACK_SERVICE_LINK_VERSION }}" != "${{ env.API_PRODUCT_VERSION }}" ]]; then
            echo "The product version differs; therefore, unlinking the service from ${{ env.ROLLBACK_SERVICE_LINK_VERSION }}"
            curl --location --request DELETE "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions/$ROLLBACK_SERVICE_LINK_VERSION_ID" \
              --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
              --header 'Content-Type: application/json'

            echo "Linking the service to ${{ env.API_PRODUCT_VERSION }}"
            curl --location --request PATCH "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions/$API_PRODUCT_VERSION_ID" \
              --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
              --header 'Content-Type: application/json' \
              --data '{
                "name": "${{ env.API_PRODUCT_VERSION }}",
                "publish_status": "published",
                "deprecated": false,
                "notify": true,
                "gateway_service": {
                  "control_plane_id": "${{ env.CONTROL_PLANE_ID }}",
                  "id": "${{ env.SERVICE_ID }}"
                }
              }'
          else
            echo "The product versions match (current - ${{ env.ROLLBACK_SERVICE_LINK_VERSION }} & OAS Spec - ${{ env.API_PRODUCT_VERSION }}); therefore, no changes needed for the service link"
          fi

      - name: Upload spec on the version
        run: |
          encoded_spec=$(base64 -w 0 ./kong-config/${{ env.SPEC_FILE }})
          echo "Check if specifications is already there or not .."

          specifications_id=$(curl --location --request GET "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions/$API_PRODUCT_VERSION_ID/specifications" \
            --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
            | jq -r '.data[] | .id')

          if [ -n "$specifications_id" ]; then
            echo "Specifications ID: $specifications_id"
            curl --location --request PATCH "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions/$API_PRODUCT_VERSION_ID/specifications/$specifications_id" \
              --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
              --header 'Content-Type: application/json' \
              --data '{
                "name": "${{ env.SPEC_FILE }}",
                "content": "'"$encoded_spec"'"
              }'
          else
            curl --location --request POST "${{ vars.ADMIN_API_URL }}/api-products/$API_PRODUCT_ID/product-versions/$API_PRODUCT_VERSION_ID/specifications" \
              --header 'Authorization: ${{ secrets.KONNECT_TOKEN }}' \
              --header 'Content-Type: application/json' \
              --data '{
                "name": "${{ env.SPEC_FILE }}",
                "content": "'"$encoded_spec"'"
              }'
          fi
